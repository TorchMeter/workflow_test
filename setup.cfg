[metadata]
# should be the same as the folder name <package-name>
name = packag-name 

# will dynamically get the version from the __version__ variable in the package
version = attr: packag-name.__version__ 
author = your-name 
author_email = your_email@email.com

# your package description in one sentence, allow spaces
description = your package description 

# your README.md file, change if you have a different file name
long_description = file: README.md 

# if your README file is in rst format, change this to text/x-rst
long_description_content_type = text/markdown 
url = https://github.com/YOUR/REPO # your github repo
keywords = key1,key2,key3 # your package keywords, separated by comma
license = MIT # your package license

# Trove classifiers
# Full list: https://pypi.python.org/pypi?%3Aaction=list_classifiers
classifiers = 
    License :: OSI Approved :: MIT License
    Development Status :: 4 - Beta
    Topic :: Software Development :: Libraries :: Python Modules
    Programming Language :: Python
    Programming Language :: Python :: 3
    Programming Language :: Python :: 3.7
    Programming Language :: Python :: Implementation :: CPython
    Programming Language :: Python :: Implementation :: PyPy

[options]
# Whether to auto-include data files found in package directories specified by MANIFEST.in
include_package_data = True 

# automatically find package directories
packages = find:
python_requires = >=3.7 # least python version

# your package dependencies, change if you have different name from `requirements.txt`
install_requires = file: requirements.txt 

[options.packages.find]
# Exclude these dir in building package even if there is a __init__.py in it
exclude =
    doc*
    document*
    test*

[options.extras_require]
# your package extra dependencies
docs = sphinx>=7.0.0
test =
    pytest
    pytest-sugar
dev =
    pytest-xdist
    %(tester)s


# If you want to add a command line tool, enable below
# [options.entry_points]
# # this will register a command line tool called `command` which will call `my_package.module:function`
# console_scripts  =
#     command = my_package.module:function 
